<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>kafka-streams</artifactId>
  <version>one</version>

  <name>kafka-streams</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>
  <repositories>
    <repository>
        <id>confluent</id>
        <url>https://packages.confluent.io/maven/</url>
    </repository>
  </repositories>
  <dependencies>
    <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.13.2</version>
    </dependency>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20220320</version>
    </dependency>
    <dependency>
      <groupId>com.googlecode.json-simple</groupId>
      <artifactId>json-simple</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-clients</artifactId>
        <version>2.1.0</version>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>1.7.25</version>
    </dependency>
    <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>2.17.2</version>
    </dependency>
    <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-streams</artifactId>
        <version>2.1.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-streams-avro-serde</artifactId>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
      <version>1.11.0</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-avro-serializer</artifactId>
      <version>5.5.0</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>common-config</artifactId>
      <version>5.2.2</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
    <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <groupId>io.confluent</groupId>
          <artifactId>kafka-schema-registry-maven-plugin</artifactId>
          <version>${io.confluent.schema-registry.version}</version>
          <configuration>
              <schemaRegistryUrls>
                  <param>${schemaRegistryUrl}</param>
              </schemaRegistryUrls>
              <userInfoConfig>${schemaRegistryBasicAuthUserInfo}</userInfoConfig>
              <subjects>
                  <transactions-value>src/main/resources/avro/io/confluent/examples/clients/basicavro/Payment2a.avsc</transactions-value>
              </subjects>
          </configuration>
          <goals>
              <goal>test-compatibility</goal>
          </goals>
      </plugin>
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <executions>
              <!--
               This declaration merges with the one in the parent, rather
               than overriding it, so we need to disable the "validate" phase
               execution that the parent declares and declare our own
               during "test-compile".
               One reason for this is that avro codegen runs during compile,
               and while it's not strictly a precondition, it's
               confusing to address style violations while the IDE is telling you
               that some generated class doesn't exist. Test-compile is the first phase
               that's guaranteed to run after compile and before any unit or integration
               tests.
               Also, we want to disable the parent's configuration because it declares stuff
               we don't care about, like suppressions. (Honestly, it shouldn't)
               -->
              <execution>
                  <id>validate</id>
                  <phase>none</phase>
                  <configuration>
                      <skip>true</skip>
                  </configuration>
              </execution>
              <execution>
                  <id>test-compile</id>
                  <phase>test-compile</phase>
                  <configuration>
                      <encoding>UTF-8</encoding>
                      <consoleOutput>true</consoleOutput>
                      <failsOnError>true</failsOnError>
                      <failOnViolation>true</failOnViolation>
                      <includeResources>false</includeResources>
                      <includeTestResources>false</includeTestResources>
                      <includeTestSourceDirectory>true</includeTestSourceDirectory>
                      <excludes>io/confluent/examples/streams/avro/**</excludes>
                      <configLocation>checkstyle.xml</configLocation>
                  </configuration>
                  <goals>
                      <goal>check</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>
      <plugin>
          <groupId>org.apache.avro</groupId>
          <artifactId>avro-maven-plugin</artifactId>
          <version>1.8.2</version>
          <!--global plugin configuration which used for run goal separately-->
          <configuration>
              <!--The Avro source directory for schema, protocol and IDL files.-->
              <sourceDirectory>${project.basedir}/src/main/avro/</sourceDirectory>
              <!--The directory where Avro writes code-generated sources. IMPORTANT!! -->
              <outputDirectory>${project.basedir}/src/main/java/</outputDirectory>
              <!--The input directory containing any Avro files used in testing.-->
              <testSourceDirectory>${project.basedir}/src/test/avro/</testSourceDirectory>
              <!--The output directory where Avro writes code-generated files for your testing purposes.-->
              <testOutputDirectory>${project.basedir}/src/test/java/</testOutputDirectory>
          </configuration>
          <executions>
              <execution>
                  <!--
                  IMPORTANT: Because this configuration is set in the execution with phase `generate-sources`.
                  So only run compile or package which include this phase will apply this configuration.
                  So if only make this configuration, run `mvn avro:schema` will only generate to the target
                  folder with default configuration.
                  -->
                  <phase>generate-sources</phase>
                  <goals>
                      <goal>schema</goal>
                      <!--If you want to generate other code, need add more goals-->
                      <goal>protocol</goal>
                      <goal>idl-protocol</goal>
                  </goals>
                  <!---->
                  <configuration>
                      <!--default is ${basedir}/src/main/avro
                      The Avro source directory for schema, protocol and IDL files.-->
                      <sourceDirectory>${project.basedir}/src/main/avro/</sourceDirectory>

                      <!--default is ${project.build.directory}/generated-sources/avro
                        The directory where Avro writes code-generated sources. IMPORTANT!! -->
                      <outputDirectory>${project.basedir}/src/main/java/</outputDirectory>

                      <!--default is ${basedir}/src/test/avro
                      The input directory containing any Avro files used in testing.-->
                      <testSourceDirectory>${project.basedir}/src/test/avro/</testSourceDirectory>

                      <!--default is ${project.build.directory}/generated-test-sources/avro
                      The output directory where Avro writes code-generated files for your testing purposes.-->
                      <testOutputDirectory>${project.basedir}/src/test/java/</testOutputDirectory>

                      <!--fieldVisibility PUBLIC_DEPRECATED
                      Determines the accessibility of fields (e.g. whether they are public or private).
                      Must be one of PUBLIC, PUBLIC_DEPRECATED or PRIVATE. PUBLIC_DEPRECATED merely
                      adds a deprecated annotation to each field, e.g. "@Deprecated public long time".-->


                      <!--In addition, the includes and testIncludes configurables can also be used to
                      specify alternative file extensions to the defaults, which are **/*.avsc, **/*.avpr
                      and **/*.avdl for schema, protocol and IDL files respectively.-->
                      <!--<includes>
                        <include>**/*.avro</include>
                      </includes>
                      <testIncludes>
                        <testInclude>**/*.test</testInclude>
                      </testIncludes>-->
                  </configuration>
              </execution>
          </executions>
      </plugin>
      <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
      </plugin>
      <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
      </plugin>
      <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
      </plugin>
      <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
      </plugin>
      <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
      </plugin>
      <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
      </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
      <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
      </plugin>
      <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
      </plugin>
      <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>8</source>
                <target>8</target>
            </configuration>
      </plugin>
      <plugin>
          <groupId>org.jsonschema2pojo</groupId>
          <artifactId>jsonschema2pojo-maven-plugin</artifactId>
          <version>0.4.34</version>
          <configuration>
          <sourceDirectory>${basedir}/src/main/resources/schema</sourceDirectory>
          <targetPackage>com.test.gen</targetPackage>
          <useCommonsLang3>true</useCommonsLang3>
          </configuration>
          <executions>
          <execution>
          <goals>
          <goal>generate</goal>
          </goals>
          </execution>
          </executions>
      </plugin>
    </plugins>
    </pluginManagement>
  </build>
</project>
